AWSTemplateFormatVersion: 2010-09-09
Description: >-
  (qs-1nae6brn2) HashiCorp Nomad Server, License: Apache 2.0 (Please do not
  remove) Aug,16,2017
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label: 'Cluster Information'
        Parameters:
          - EnvironmentName
      - Label:
          default: 'VPC network configuration'
        Parameters:
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
      - Label:
          default: 'Access Configuration'
        Parameters:
          - KeyPairName
      - Label:
          default: Nomad Setup
        Parameters:
          - NomadInstanceType
          - NomadServerNodes
          - NomadEc2RetryTagKey
          - NomadEc2RetryTagValue
          - NomadSecGroup
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      EnvironmentName:
        default: Environment Name (Cluster element tags are based on this value)
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      PrivateSubnet3ID:
        default: Private Subnet 3 ID
      KeyPairName:
        default: Key name
      NomadInstanceType:
        default: Nomad cluster node instance type
      NomadServerNodes:
        default: Number of Nomad server nodes
      NomadEc2RetryTagKey: 
        default: Tag key for Nomad cluster nodes
      NomadEc2RetryTagValue: 
        default: Tag value for Nomad cluster nodes
      NomadSecGroup:
        default: Nomad cluster security group
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix

Parameters:
  EnvironmentName:
    Description: The name of the environment. This is appended with element tags
      to create tags for generated objects e.g. "EnvironmentName-nomad-server"
    Type: String
    Default: "quickstart"
    ConstraintDescription: Must match EC2 Tag Name requirements

  PrivateSubnet1ID:
    Description: "ID of the private subnet 1 in Availability Zone 1 (e.g., subnet-xxxxxxxx)"
    Type: "AWS::EC2::Subnet::Id"
  PrivateSubnet2ID:
    Description: "ID of the private subnet 2 in Availability Zone 2 (e.g., subnet-xxxxxxxx)"
    Type: "AWS::EC2::Subnet::Id"
  PrivateSubnet3ID:
    Description: "ID of the private subnet 3 in Availability Zone 3 (e.g., subnet-xxxxxxxx)"
    Type: "AWS::EC2::Subnet::Id"

  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: "AWS::EC2::KeyPair::KeyName"
#    MinLength: 1
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

  NomadInstanceType:
    Type: String
    Description: The EC2 instance type for the Nomad instances.
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m4.large
      - m4.xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
    ConstraintDescription: Choose an instance type.
    Default: m5.large
  NomadServerNodes:
    Type: String
    Description: 
      The number of Nomad server nodes that will be created. You can choose 3,
      5, or 7 nodes.
    AllowedValues:
      - "3"
      - "5"
      - "7"
    Default: "3"
    ConstraintDescription: "Must one of the following values: 3,5,7."
  NomadEc2RetryTagKey:
    Type: String
    Default: "quickstart-nomad-cluster"
    Description:
      The EC2 instance tag key to filter on when joining to other Nomad
      nodes. Defaults to "EnvironmentName-nomad-cluster-role"
    ConstraintDescription: Must match EC2 Tag Name requirements.
  NomadEc2RetryTagValue:
    Type: String
    Default: "nomad-server"
    Description:
      The EC2 instance tag key to filter on when joining to other Nomad
      nodes. Defaults to "server"
    ConstraintDescription: Must match EC2 Tag value requirements.
  NomadSecGroup:
    Type: "AWS::EC2::SecurityGroup::Id"
    Description:
      The security group to use for Nomad server nodes.

  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: "aws-quickstart"
    Description: >-
      S3 bucket name for the Quick Start assets. Quick Start bucket name can
      include numbers, lowercase letters, uppercase letters, and hyphens (-). It
      cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/).
    Default: "quickstart-hashicorp-nomad/"
    Description: >-
      S3 key prefix for the Quick Start assets. Quick Start key prefix can
      include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String

Mappings:
  RegionELBAccountId:
    ap-east-1:
      AccountId: "754344448648"
    ap-northeast-1:
      AccountId: "582318560864"
    ap-northeast-2:
      AccountId: "600734575887"
    ap-northeast-3:
      AccountId: "383597477331"
    ap-southeast-1:
      AccountId: "114774131450"
    ap-southeast-2:
      AccountId: "783225319266"
    ap-south-1:
      AccountId: "718504428378"
    me-south-1:
      AccountId: "076674570225"
    ca-central-1:
      AccountId: "985666609251"
    eu-central-1:
      AccountId: "054676820928"
    eu-north-1:
      AccountId: "897822967062"
    eu-west-1:
      AccountId: "156460612806"
    eu-west-2:
      AccountId: "652711504416"
    eu-west-3:
      AccountId: "009996457667"
    sa-east-1:
      AccountId: "507241528517"
    us-east-1:
      AccountId: "127311923021"
    us-east-2:
      AccountId: "033677994240"
    us-west-1:
      AccountId: "027434742980"
    us-west-2:
      AccountId: "797873946194"
  AWSAMIRegionMap:
    af-south-1:
      AMZNLINUX2: ami-0936d2754993c364e
      AMZNLINUX2ARM: ami-01d326fa7db123542
      US2004HVM: ami-022666956ad401a16
      CENTOS7HVM: ami-0a2be7731769e6cc1
#      SLES15HVM: ami-EXAMPLE
    ap-northeast-1:
      AMZNLINUX2: ami-0ca38c7440de1749a
      AMZNLINUX2ARM: ami-005322a6d5cecfe58
      US2004HVM: ami-015f1a68ce825a8d2
      CENTOS7HVM: ami-06a46da680048c8ae
      SLES15HVM: ami-056ac8ad44e6a7e1f
    ap-northeast-2:
      AMZNLINUX2: ami-0f2c95e9fe3f8f80e
      AMZNLINUX2ARM: ami-01b0796a552129792
      US2004HVM: ami-0be9734c9e68b99f4
      CENTOS7HVM: ami-06e83aceba2cb0907
      SLES15HVM: ami-0f81fff879bafe6b8
    ap-northeast-3:
      AMZNLINUX2: ami-06e9ad0943b200859
      AMZNLINUX2ARM: ami-02415340f44a47b93
      US2004HVM: ami-01cb3e73f8ef13fdc
      CENTOS7HVM: ami-02d6b455335e3af14
      SLES15HVM: ami-0d8518dd12d11dfc2
    ap-south-1:
      AMZNLINUX2: ami-010aff33ed5991201
      AMZNLINUX2ARM: ami-01ad94fdf8150776c
      US2004HVM: ami-00aaac1f2ef4ce965
      CENTOS7HVM: ami-026f33d38b6410e30
      SLES15HVM: ami-01be89269d32f2a16
    ap-southeast-1:
      AMZNLINUX2: ami-02f26adf094f51167
      AMZNLINUX2ARM: ami-006eccfc9e6f597af
      US2004HVM: ami-0012ffabeb7413479
      CENTOS7HVM: ami-07f65177cb990d65b
      SLES15HVM: ami-070356c21596ddc67
    ap-southeast-2:
      AMZNLINUX2: ami-0186908e2fdeea8f3
      AMZNLINUX2ARM: ami-00719b70b31680d14
      US2004HVM: ami-03ec1fe05b3849c74
      CENTOS7HVM: ami-0b2045146eb00b617
      SLES15HVM: ami-0c4245381c67efb39
    ca-central-1:
      AMZNLINUX2: ami-0101734ab73bd9e15
      AMZNLINUX2ARM: ami-039750f0a88733fff
      US2004HVM: ami-04c56d394d31cdeac
      CENTOS7HVM: ami-04a25c39dc7a8aebb
      SLES15HVM: ami-0c97d9b588207dad6
    eu-central-1:
      AMZNLINUX2: ami-043097594a7df80ec
      AMZNLINUX2ARM: ami-000cbb96a79217336
      US2004HVM: ami-0980c5102b5ef10cc
      CENTOS7HVM: ami-0e8286b71b81c3cc1
      SLES15HVM: ami-05dfd265ea534a3e9
    me-south-1:
      AMZNLINUX2: ami-0880769bc15eeec4f
      AMZNLINUX2ARM: ami-001dc219c441b922d
      US2004HVM: ami-03cc0b5db8321f2e5
      CENTOS7HVM: ami-011c71a894b10f35b
      SLES15HVM: ami-0252c6d3a59c7473b
    ap-east-1:
      AMZNLINUX2: ami-0aca22cb23f122f27
      AMZNLINUX2ARM: ami-01f5cec80321bd86e
      US2004HVM: ami-0c7e5903bee96ef81
      CENTOS7HVM: ami-0e5c29e6c87a9644f
      SLES15HVM: ami-0ad6e15bcbb2dbe38
    eu-north-1:
      AMZNLINUX2: ami-050fdc53cf6ba8f7f
      AMZNLINUX2ARM: ami-00a8ac2b5311cd613
      US2004HVM: ami-0663a4867a210287a
      CENTOS7HVM: ami-05788af9005ef9a93
      SLES15HVM: ami-0741fa1a008af40ad
    eu-south-1:
      AMZNLINUX2: ami-0f447354763f0eaac
      AMZNLINUX2ARM: ami-011d4067dedd119f5
      US2004HVM: ami-035e213233577516f
      CENTOS7HVM: ami-03014b98e9665115a
      SLES15HVM: ami-051cbea0e7660063d
    eu-west-1:
      AMZNLINUX2: ami-063d4ab14480ac177
      AMZNLINUX2ARM: ami-00552336fb4b81164
      US2004HVM: ami-0213344887e47003a
      CENTOS7HVM: ami-0b850cf02cc00fdc8
      SLES15HVM: ami-0a58a1b152ba55f1d
    eu-west-2:
      AMZNLINUX2: ami-06dc09bb8854cbde3
      AMZNLINUX2ARM: ami-03144ab666315a8a3
      US2004HVM: ami-0add0a5a0cf9afc6c
      CENTOS7HVM: ami-09e5afc68eed60ef4
      SLES15HVM: ami-01497522185aaa4ee
    eu-west-3:
      AMZNLINUX2: ami-0b3e57ee3b63dd76b
      AMZNLINUX2ARM: ami-009b1ed4d1f59029a
      US2004HVM: ami-01019e7343a5f361d
      CENTOS7HVM: ami-0cb72d2e599cffbf9
      SLES15HVM: ami-0f238bd4c6fdbefb0
    sa-east-1:
      AMZNLINUX2: ami-05373777d08895384
      AMZNLINUX2ARM: ami-0092271c8131fcde7
      US2004HVM: ami-0312c74c38dc7bae6
      CENTOS7HVM: ami-0b30f38d939dd4b54
      SLES15HVM: ami-0772af912976aa692
    us-east-1:
      AMZNLINUX2: ami-0d5eff06f840b45e9
      AMZNLINUX2ARM: ami-002cc39e7bf021a77
      US2004HVM: ami-0db6c6238a40c0681
      CENTOS7HVM: ami-0affd4508a5d2481b
      SLES15HVM: ami-0b1764f3d7d2e2316
    us-gov-west-1:
      AMZNLINUX2: ami-0bbf3595bb2fb39ec
      AMZNLINUX2ARM: ami-6bd0e80a
      SLES15HVM: ami-57c0ba36
    us-gov-east-1:
      AMZNLINUX2: ami-0cc17d57bec8c6017
      AMZNLINUX2ARM: ami-4a31d93b
      SLES15HVM: ami-05e4bedfad53425e9
    us-east-2:
      AMZNLINUX2: ami-077e31c4939f6a2f3
      AMZNLINUX2ARM: ami-0029d4ab5707ce922
      US2004HVM: ami-03b6c8bd55e00d5ed
      CENTOS7HVM: ami-01e36b7901e884a10
      SLES15HVM: ami-05ea824317ffc0c20
    us-west-1:
      AMZNLINUX2: ami-04468e03c37242e1e
      AMZNLINUX2ARM: ami-00872c48515f06ba0
      US2004HVM: ami-0f5868930cb63c89c
      CENTOS7HVM: ami-098f55b4287a885ba
      SLES15HVM: ami-00e34a7624e5a7107
    us-west-2:
      AMZNLINUX2: ami-0cf6f5c8a62fa5da6
      AMZNLINUX2ARM: ami-0043879194eb2ad40
      US2004HVM: ami-038a0ccaaedae6406
      CENTOS7HVM: ami-0bc06212a56393ee1
      SLES15HVM: ami-0f1e3b3fb0fec0361
    cn-north-1:
      AMZNLINUX2: ami-0c52e2685c7218558
      AMZNLINUX2ARM: ami-088cc0c104292da9c
      CENTOS7HVM: ami-08c16f7e830c0e393
      SLES15HVM: ami-021392849b6221a81
    cn-northwest-1:
      AMZNLINUX2: ami-05b9b6d6acf8ae9b6
      AMZNLINUX2ARM: ami-0b5c6ceb80eb57861
      CENTOS7HVM: ami-0f21aa96a61df8c44
      SLES15HVM: ami-00e1de3ee6d0d28ea
  LinuxAMINameMap:
    Amazon-Linux2-HVM:
      Code: AMZNLINUX2
      OS: Amazon
    Amazon-Linux2-HVM-ARM:
      Code: AMZNLINUX2ARM
      OS: Amazon
    CentOS-7-HVM:
      Code: CENTOS7HVM
      OS: CentOS
    Ubuntu-Server-18.04-LTS-HVM:
      Code: US1804HVM
      OS: Ubuntu
    Ubuntu-Server-20.04-LTS-HVM:
      Code: US2004HVM
      OS: Ubuntu
    SUSE-SLES-15-HVM:
      Code: SLES15HVM
      OS: SLES

Conditions:
  GovCloudCondition: !Equals ["us-gov-west-1", !Ref 'AWS::Region']

Resources:
  NomadServerAsg:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      LaunchConfigurationName: !Ref NomadServerLC
      MinSize: !Ref NomadServerNodes
      MaxSize: !Ref NomadServerNodes
      DesiredCapacity: !Ref NomadServerNodes
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1ID
        - !Ref PrivateSubnet2ID
        - !Ref PrivateSubnet3ID
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref 'AWS::StackName', Nomad-Server]]
          PropagateAtLaunch: true
        - Key: !Ref NomadEc2RetryTagKey
          Value: !Ref NomadEc2RetryTagValue
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref NomadServerNodes
        Timeout: PT20M

  NomadServerLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          cs_install:
            - install_and_enable_cfn_hup
            - create_nomad_group_user_dir
            - install_nomad
            - install_nomad_template
            - nomad_bootstrap
            - setup_dnsmasq
        install_and_enable_cfn_hup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: |
                [main]
                stack={{AWS_StackID}}
                region={{AWS_Region}}
              context:
                AWS_StackID: !Ref "AWS::StackId"
                AWS_Region: !Ref "AWS::Region"
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: "
                [cfn-auto-reloader-hook]

                triggers=post.update

                path=Resources.NomadClientLC.Metadata.AWS::CloudFormation::Init

                action=/usr/local/bin/cfn-init -v
                          --stack {{AWS_StackName}}
                          --resource NomadClientLC
                          --configsets cs_install
                          --region {{AWS_Region}}

                runas=root"
              context:
                AWS_StackName: !Ref "AWS::StackName"
                AWS_Region: !Ref "AWS::Region"
            /lib/systemd/system/cfn-hup.service:
              content: |
                [Unit]
                Description=cfn-hup daemon

                [Service]
                Type=simple
                ExecStart=/usr/local/bin/cfn-hup
                Restart=always

                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service
        create_nomad_group_user_dir:
          users:
            nomad:
              homeDir: /srv/nomad
          commands:
            01_create_data_dir:
              command: mkdir -p /opt/nomad/data
        install_nomad:
          sources:
            /usr/bin/: https://releases.hashicorp.com/nomad/1.1.2/nomad_1.1.2_linux_amd64.zip
        install_nomad_template:
          sources:
            /usr/bin/: https://releases.hashicorp.com/consul-template/0.26.0/consul-template_0.26.0_linux_amd64.zip
        nomad_bootstrap:
          files:
            /opt/nomad/config/nomad.hcl:
              content: |
                bind_addr  = "0.0.0.0"
                datacenter = "{{Region}}"
                log_level  = "WARN"
                advertise {
                  http     = "{{InterfaceTemplate}}"
                  rpc      = "{{InterfaceTemplate}}"
                  serf     = "{{InterfaceTemplate}}"
                }
              context:
                Region: !Ref "AWS::Region"
                InterfaceTemplate: '{{ GetDefaultInterfaces | include "type" "ipv4" | attr "address" }}'
              mode: 000644

            /opt/nomad/config/server.hcl:
              content: |
                server {
                  enabled          = true
                  bootstrap_expect = {{NomadServerNodes}}
                  raft_protocol    = 3
                  server_join {
                    retry_join = ["provider=aws region={{Region}} tag_key={{NomadEc2RetryTagKey}} tag_value={{NomadEc2RetryTagValue}}"]
                  }
                }
              context:
                NomadServerNodes: !Ref NomadServerNodes
                NomadEc2RetryTagKey: !Ref NomadEc2RetryTagKey
                NomadEc2RetryTagValue: !Ref NomadEc2RetryTagValue
                Region: !Ref "AWS::Region"
              mode: 000644

            /etc/systemd/system/nomad.service:
              content: |
                [Unit]
                Description=Nomad
                Documentation=https://nomadproject.io/docs/
                Wants=network-online.target
                After=network-online.target
                ConditionFileNotEmpty=/opt/nomad/config/nomad.hcl
                ConditionFileNotEmpty=/opt/nomad/config/server.hcl

                # When using Nomad with Consul it is not necessary to start Consul first. These
                # lines start Consul before Nomad as an optimization to avoid Nomad logging
                # that Consul is unavailable at startup.
                #Wants=consul.service
                #After=consul.service

                [Service]
                Type=notify
                User=nomad
                Group=nomad
                EnvironmentFile=/opt/nomad/config/nomad.env
                ExecReload=/bin/kill -HUP $MAINPID
                ExecStart=/usr/bin/nomad agent -config /opt/nomad/config -data-dir /opt/nomad/data

                KillMode=process
                KillSignal=SIGINT
                LimitNOFILE=65536
                LimitNPROC=infinity
                Restart=on-failure
                TimeoutSec=300s
                RestartSec=2

                ## Configure unit start rate limiting. Units which are started more than
                ## *burst* times within an *interval* time span are not permitted to start any
                ## more. Use `StartLimitIntervalSec` or `StartLimitInterval` (depending on
                ## systemd version) to configure the checking interval and `StartLimitBurst`
                ## to configure how many starts per interval are allowed. The values in the
                ## commented lines are defaults.
                # StartLimitBurst = 5

                ## StartLimitIntervalSec is used for systemd versions >= 230
                # StartLimitIntervalSec = 10s

                ## StartLimitInterval is used for systemd versions < 230
                # StartLimitInterval = 10s

                TasksMax=infinity
                OOMScoreAdjust=-1000

                [Install]
                WantedBy=multi-user.target
          commands:
            00_fill_nomad_config_nodename:
              command: echo "name=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)" >> /opt/nomad/config/nodename.hcl
            01_change_ownership:
              command: chown -R nomad:nomad /opt/nomad
            02_reload_systemd:
              command: systemctl daemon-reload
            03_start_nomad:
              command: systemctl enable nomad
            04_start_nomad:
              command: systemctl start nomad

        setup_dnsmasq:
          files:
            /etc/dnsmasq.d/consul:
              content: |
                server=/consul/127.0.0.1#8600
                listen-address=127.0.0.1
                bind-interfaces
          packages:
            apt:
              dnsmasq-base: []
              dnsmasq: []
              jq: []
          commands:
            01_start_dnsmasq:
              command: service dnsmasq restart
    Properties:
      InstanceType: !Ref NomadInstanceType
      AssociatePublicIpAddress: false
      SecurityGroups:
        - !Ref NomadSecGroup
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref "AWS::Region"
        - US2004HVM
      IamInstanceProfile: !Ref NomadServerProfile
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -x
            #CFN Functions
            function cfn_fail
            {
              cfn-signal -e 1 --stack ${AWS::StackName} --region ${AWS::Region} --resource NomadServerAsg
              exit 1
            }
            function cfn_success
            {
              cfn-signal -e 0 --stack ${AWS::StackName} --region ${AWS::Region} --resource NomadServerAsg
              exit 0
            }
            S3URI=https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}
            apt-get -y update
            # Install git
            apt-get install -y git jq
            #Load Linux utils
            until git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git ; do echo "Retrying"; done
            cd /quickstart-linux-utilities && source quickstart-cfn-tools.source
            # Prep operating systems
            qs_update-os || qs_err
            qs_bootstrap_pip || qs_err
            qs_aws-cfn-bootstrap || qs_err
            #cfn-init
            echo "Executing config-sets"
            cfn-init -v --stack ${AWS::StackName} --resource NomadServerLC --configsets cs_install --region ${AWS::Region} || (cfn_fail || (journalctl -b --no-pager -u nomad && cat /opt/nomad/config/server.json))
            # Signal cfn-init (final check)
            [ $(qs_status) == 0 ] && cfn_success || cfn_fail
          - S3Region: !If [GovCloudCondition, s3-us-gov-west-1, s3]

  NomadServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
            Sid: ""
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - "s3:GetObject"
                Resource: !Sub "arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*"
                Effect: Allow
          PolicyName: AuthenticatedS3GetObjects

  NomadServerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: nomad-server
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "ec2:DescribeInstances"
            Resource: "*"
      Roles:
        - !Ref NomadServerRole

  NomadServerProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref NomadServerRole

Outputs:
  NomadEc2RetryTagKey:
    Value: !Ref NomadEc2RetryTagKey
    Description: The EC2 instance tag key to filter on when joining to other Nomad server nodes.
  NomadEc2RetryTagValue:
    Value: !Ref NomadEc2RetryTagValue
    Description: The EC2 instance tag value to filter on when joining to other Nomad server nodes.
