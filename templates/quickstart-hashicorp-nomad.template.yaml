AWSTemplateFormatVersion: 2010-09-09
Description: "HashiCorp Nomad (Please do not remove) Aug,28,2019 QS(0036)"
Metadata:
  QuickStartDocumentation:
    EntrypointName: "Launch into an existing VPC"
  LICENSE: "Apache License, Version 2.0"
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: 'VPC network configuration'
        Parameters:
          - VPCID
          - VPCCIDR
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
          - PublicSubnet1ID
          - PublicSubnet2ID
          - PublicSubnet3ID
      - Label:
          default: "Bastion host configuration"
        Parameters:
          - BastionSecurityGroupID
      - Label:
          default: Nomad Setup
        Parameters:
          - NomadServerInstanceType
          - NomadServerNodeCount
          - NomadClientInstanceType
          - NomadClientNodeCount
          - NomadEc2RetryTagKey
          - NomadEc2RetryTagValue
          - KeyPair
          # - EnablegRPC
      - Label:
          default: "DNS and SSL configuration"
        Parameters:
          - LoadBalancerFQDN
          - HostedZoneID
          - SSLCertificateArn
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      KeyPair:
        default: Key name
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      PrivateSubnet3ID:
        default: Private Subnet 3 ID
      PublicSubnet1ID:
        default: Public Subnet 1 ID
      PublicSubnet2ID:
        default: Public Subnet 2 ID
      PublicSubnet3ID:
        default: Public Subnet 3 ID
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      VPCID:
        default: VPC ID
      VPCCIDR:
        default: VPC CIDR block
      SSLCertificateArn:
        default: SSL certificate ARN
      HostedZoneID:
        default: Route 53 hosted zone ID
      LoadBalancerFQDN:
        default: Load Balancer FQDN
      # EnablegRPC:
      #   default: Enable gRPC on Nomad
      NomadServerInstanceType:
        default: Nomad server node instance type
      NomadServerNodeCount:
        default: Number of Nomad server nodes
      NomadClientInstanceType:
        default: Nomad client node instance type
      NomadClientNodeCount:
        default: Number of Nomad client nodes
      NomadEc2RetryTagKey: 
        default: Tag key for Nomad cluster nodes
      NomadEc2RetryTagValue: 
        default: Tag value for Nomad cluster nodes
      BastionSecurityGroupID:
        default: Bastion host security group ID

Parameters:
  BastionSecurityGroupID:
    Description: ID of the bastion host security group to enable SSH connections (e.g., sg-7f16e910)
    Type: "AWS::EC2::SecurityGroup::Id"
  NomadEc2RetryTagKey:
    Description:
      The EC2 instance tag key to filter on when joining to other Nomad
      nodes.
    Type: String
    Default: "quickstart-nomad-cluster"
    ConstraintDescription: Must match EC2 Tag Name requirements.
  NomadEc2RetryTagValue:
    Description:
      The EC2 instance tag value to filter on when joining to other Nomad
      nodes.
    Type: String
    Default: "nomad-member-node"
    ConstraintDescription: Must match EC2 Tag Name requirements.
  KeyPair:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: "AWS::EC2::KeyPair::KeyName"
    # MinLength: 1
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  PrivateSubnet1ID:
    Description: "ID of the private subnet 1 in Availability Zone 1 (e.g., subnet-xxxxxxxx)"
    Type: "AWS::EC2::Subnet::Id"
  PrivateSubnet2ID:
    Description: "ID of the private subnet 2 in Availability Zone 2 (e.g., subnet-xxxxxxxx)"
    Type: "AWS::EC2::Subnet::Id"
  PrivateSubnet3ID:
    Description: "ID of the private subnet 3 in Availability Zone 3 (e.g., subnet-xxxxxxxx)"
    Type: "AWS::EC2::Subnet::Id"
  PublicSubnet1ID:
    Description: "ID of the public subnet 1 in Availability Zone 1 (e.g., subnet-xxxxxxxx)"
    Type: "AWS::EC2::Subnet::Id"
  PublicSubnet2ID:
    Description: "ID of the public subnet 2 in Availability Zone 2 (e.g., subnet-xxxxxxxx)"
    Type: "AWS::EC2::Subnet::Id"
  PublicSubnet3ID:
    Description: "ID of the public subnet 3 in Availability Zone 3 (e.g., subnet-xxxxxxxx)"
    Type: "AWS::EC2::Subnet::Id"
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: "aws-quickstart"
    Description: >-
      S3 bucket name for the Quick Start assets. Quick Start bucket name can
      include numbers, lowercase letters, uppercase letters, and hyphens (-). It
      cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/).
    Default: "quickstart-hashicorp-nomad/"
    Description: >-
      S3 key prefix for the Quick Start assets. Quick Start key prefix can
      include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  VPCID:
    Description: VPC ID
    Type: "AWS::EC2::VPC::Id"
  VPCCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: CIDR block for the VPC
    Type: String
  NomadServerInstanceType:
    Type: String
    Description: The EC2 instance type for the Nomad instances.
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m4.large
      - m4.xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
    ConstraintDescription: Choose an instance type.
    Default: m5.large
  NomadServerNodeCount:
    Type: String
    Description: The number of Nomad server nodes that will be created. You can choose 3, 5, or 7 nodes.
    AllowedValues:
      - "1"
      - "3"
      - "5"
      - "7"
    Default: "3"
  NomadClientInstanceType:
    Type: String
    Description: The EC2 instance type for the Nomad instances.
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m4.large
      - m4.xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
    ConstraintDescription: Choose an instance type.
    Default: m5.large
  NomadClientNodeCount:
    Type: String
    Description: The number of Nomad client nodes that will be created.
    Default: "0"
  SSLCertificateArn:
    Description: The Amazon Resource Name (ARN) of the SSL certificate to use for the load balancer. Use 'SSLCertificateArn' if you are not using 'LoadBalancerFQDN' and 'HostedZoneID'.
    Type: String
    Default: ''
  HostedZoneID:
    Description: Route 53 Hosted Zone ID of the domain name. Used in conjunction with 'LoadBalancerFQDN'.
    Type: String
    MaxLength: 32
    Default: ''
  LoadBalancerFQDN:
    Description: The fully qualified domain name for the nomad load balancer. Use with 'HostedZoneID' if you are not using SSL.
    Type: String
    Default: ''
  # EnablegRPC:
  #   Description: Enable gRPC on the Nomad server cluster.
  #   Type: String
  #   Default: "false"
  #   AllowedValues:
  #     - "true"
  #     - "false"

Mappings:
  RegionELBAccountId:
    ap-east-1:
      AccountId: "754344448648"
    ap-northeast-1:
      AccountId: "582318560864"
    ap-northeast-2:
      AccountId: "600734575887"
    ap-northeast-3:
      AccountId: "383597477331"
    ap-southeast-1:
      AccountId: "114774131450"
    ap-southeast-2:
      AccountId: "783225319266"
    ap-south-1:
      AccountId: "718504428378"
    me-south-1:
      AccountId: "076674570225"
    ca-central-1:
      AccountId: "985666609251"
    eu-central-1:
      AccountId: "054676820928"
    eu-north-1:
      AccountId: "897822967062"
    eu-west-1:
      AccountId: "156460612806"
    eu-west-2:
      AccountId: "652711504416"
    eu-west-3:
      AccountId: "009996457667"
    sa-east-1:
      AccountId: "507241528517"
    us-east-1:
      AccountId: "127311923021"
    us-east-2:
      AccountId: "033677994240"
    us-west-1:
      AccountId: "027434742980"
    us-west-2:
      AccountId: "797873946194"
  AWSAMIRegionMap:
    ap-east-1:
      US1604HVM: ami-e5256594
    ap-northeast-1:
      US1604HVM: ami-078648cce0d33c256
    ap-northeast-2:
      US1604HVM: ami-0539a1389fedcbdc8
    ap-southeast-1:
      US1604HVM: ami-05f112c29645f0812
    ap-southeast-2:
      US1604HVM: ami-0e4bc04bd401729d6
    me-south-1:
      US1604HVM: ami-0054116010789ce83
    ap-south-1:
      US1604HVM: ami-03b8a287edc0c1253
    ca-central-1:
      US1604HVM: ami-0e2df0719252d4491
    eu-central-1:
      US1604HVM: ami-05ed2c1359acd8af6
    eu-north-1:
      US1604HVM: ami-094ac8f5eb69dd943
    eu-west-1:
      US1604HVM: ami-008320af74136c628
    eu-west-2:
      US1604HVM: ami-004c1e61ae5d76090
    eu-west-3:
      US1604HVM: ami-08eebff62e61110b7
    sa-east-1:
      US1604HVM: ami-0ddec8b41a3411374
    us-east-1:
      US1604HVM: ami-0a0ddd875a1ea2c7f
    us-east-2:
      US1604HVM: ami-04781752c9b20ea41
    us-west-1:
      US1604HVM: ami-0c1e832407373333f
    us-west-2:
      US1604HVM: ami-0a4df59262c92cf19

Conditions:
  # gRPCCondition: !Equals [!Ref EnablegRPC, "true"]
  GovCloudCondition: !Equals [!Ref AWS::Region, "us-gov-west-1"]
  GenerateSSL: !And
    - !Equals [!Ref SSLCertificateArn, '']
    - !Not [!Equals [!Ref LoadBalancerFQDN, '']]
  SetupRoute53: !And
    - !Not
      - !Equals [!Ref HostedZoneID, '']
    - !Not
      - !Equals [!Ref LoadBalancerFQDN, '']

Resources:
  NomadSecGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enables SSH access.
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroupID
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref VPCCIDR
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref "AWS::StackName"
              - NomadSecGroup
  NomadServerASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      LaunchConfigurationName: !Ref NomadServerLC
      MinSize: !Ref NomadServerNodeCount
      MaxSize: !Ref NomadServerNodeCount
      DesiredCapacity: !Ref NomadServerNodeCount
      LoadBalancerNames: [!Ref NomadServerELB]
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1ID
        - !Ref PrivateSubnet2ID
        - !Ref PrivateSubnet3ID
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref "AWS::StackName"
              - Nomad-Server
          PropagateAtLaunch: true
        - Key: !Ref NomadEc2RetryTagKey
          Value: !Ref NomadEc2RetryTagValue
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref NomadServerNodeCount
        Timeout: PT20M
  NomadClientASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      LaunchConfigurationName: !Ref NomadClientLC
      MinSize: !Ref NomadClientNodeCount
      MaxSize: !Ref NomadClientNodeCount
      DesiredCapacity: !Ref NomadClientNodeCount
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1ID
        - !Ref PrivateSubnet2ID
        - !Ref PrivateSubnet3ID
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref "AWS::StackName"
              - Nomad-Client
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref NomadClientNodeCount
        Timeout: PT20M
  NomadServerELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: "internet-facing"
      Subnets:
        - !Ref PublicSubnet1ID
        - !Ref PublicSubnet2ID
        - !Ref PublicSubnet3ID
      SecurityGroups:
        - !Ref NomadServerELBSecGroup
      CrossZone: true
      Listeners:
        - LoadBalancerPort: "80"
          InstancePort: "8500"
          Protocol: HTTP
        - LoadBalancerPort: "443"
          InstancePort: "8500"
          Protocol: HTTPS
          SSLCertificateId:
            !If
              - GenerateSSL
              - !GetAtt ConfigureSSLStack.Outputs.ACMCertificate
              - !Ref SSLCertificateArn
      HealthCheck:
        Target: HTTP:8500/v1/status/leader
        HealthyThreshold: "3"
        UnhealthyThreshold: "2"
        Interval: "30"
        Timeout: "5"
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 300
      AccessLoggingPolicy:
        S3BucketName: !Ref NomadServerLogsBucket
        S3BucketPrefix: NomadELBLogs
        Enabled: true
        EmitInterval: 60
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref "AWS::StackName"
              - NomadServerELB
    DependsOn: NomadServerLogsBucketPolicy
  NomadServerLogsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
  NomadServerLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref NomadServerLogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: NomadQSGELBAccessLogs
            Action:
              - "s3:PutObject"
            Effect: Allow
            Resource:
              !Join [
                "",
                [
                  "arn:aws:s3:::",
                  !Ref "NomadServerLogsBucket",
                  "/NomadELBLogs",
                  "/*",
                ],
              ]
            Principal:
              AWS:
                !Join [
                  "",
                  [
                    "arn:aws:iam::",
                    !FindInMap [
                      RegionELBAccountId,
                      !Ref "AWS::Region",
                      AccountId,
                    ],
                    ":root",
                  ],
                ]
  NomadServerELBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enables ELB Access to cluster instances.
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        # - IpProtocol: tcp
        #   FromPort: 80
        #   ToPort: 80
        #   CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref "AWS::StackName"
              - NomadServerELBSecGroup
  NomadServerLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          cs_install:
            - install_and_enable_cfn_hup
            - create_nomad_group_user_dir
            - install_nomad
            - install_consul
            - install_vault
            - install_consul_template
            - nomad_bootstrap
            - setup_dnsmasq
        install_and_enable_cfn_hup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub 
                "[cfn-auto-reloader-hook]

                triggers=post.update

                path=Resources.NomadClientLC.Metadata.AWS::CloudFormation::Init

                action=/usr/local/bin/cfn-init -v
                          --stack ${AWS::StackName}
                          --resource NomadClientLC
                          --configsets cs_install
                          --region ${AWS::Region}

                runas=root"
            /lib/systemd/system/cfn-hup.service:
              content: |
                [Unit]
                Description=cfn-hup daemon
 
                [Service]
                Type=simple
                ExecStart=/usr/local/bin/cfn-hup
                Restart=always

                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service
        create_nomad_group_user_dir:
          users:
            nomad:
              homeDir: /srv/nomad
          commands:
            01_create_data_dir:
              command: mkdir -p /opt/nomad/data
        install_nomad:
          sources:
            /usr/bin/: https://releases.hashicorp.com/nomad/1.1.2/nomad_1.1.2_linux_amd64.zip
        install_consul:
          sources:
            /usr/bin/: https://releases.hashicorp.com/consul/1.10.1/consul_1.10.1_linux_amd64.zip
        install_vault:
          sources:
            /usr/bin/: https://releases.hashicorp.com/vault/1.7.3/vault_1.7.3_linux_amd64.zip
        install_consul_template:
          sources:
            /usr/bin/: https://releases.hashicorp.com/consul-template/0.26.0/consul-template_0.26.0_linux_amd64.zip
        nomad_bootstrap:
          files:
            /opt/nomad/config/nomad.hcl:
              content: |
                bind_addr  = "0.0.0.0"
                datacenter = "{{Region}}"
                log_level  = "WARN"
                advertise {
                  http     = "{{{InterfaceTemplate}}}"
                  rpc      = "{{{InterfaceTemplate}}}"
                  serf     = "{{{InterfaceTemplate}}}"
                }
              context:
                Region: !Ref "AWS::Region"
                InterfaceTemplate: '{{ GetDefaultInterfaces | include \"type\" \"ipv4\" | attr \"address\" }}'
              mode: 000644
            /opt/nomad/config/server.hcl:
              content: !Sub |
                server {
                  enabled          = true
                  bootstrap_expect = ${NomadServerNodeCount}
                  raft_protocol    = 3
                  server_join {
                    retry_join = ["provider=aws region=${AWS::Region} tag_key=${NomadEc2RetryTagKey} tag_value=${NomadEc2RetryTagValue}"]
                  }
                }
              mode: 000644
            /etc/systemd/system/nomad.service:
             content: |
                [Unit]
                Description=Hashicorp Nomad
                Documentation=https://nomadproject.io/docs/
                Wants=network-online.target
                After=network-online.target
                ConditionFileNotEmpty=/opt/nomad/config/nomad.hcl
                ConditionFileNotEmpty=/opt/nomad/config/server.hcl

                # When using Nomad with Consul it is not necessary to start Consul first. These
                # lines start Consul before Nomad as an optimization to avoid Nomad logging
                # that Consul is unavailable at startup.
                #Wants=consul.service
                #After=consul.service

                [Service]
                Type=simple
                User=nomad
                Group=nomad
                EnvironmentFile=-/opt/nomad/config/nomad.env
                ExecReload=/bin/kill -HUP $MAINPID
                ExecStart=/usr/bin/nomad agent -config /opt/nomad/config -data-dir /opt/nomad/data

                KillMode=process
                KillSignal=SIGINT
                LimitNOFILE=65536
                LimitNPROC=infinity
                Restart=on-failure
                TimeoutSec=300s
                RestartSec=2

                ## Configure unit start rate limiting. Units which are started more than
                ## *burst* times within an *interval* time span are not permitted to start any
                ## more. Use `StartLimitIntervalSec` or `StartLimitInterval` (depending on
                ## systemd version) to configure the checking interval and `StartLimitBurst`
                ## to configure how many starts per interval are allowed. The values in the
                ## commented lines are defaults.
                # StartLimitBurst = 5

                ## StartLimitIntervalSec is used for systemd versions >= 230
                # StartLimitIntervalSec = 10s

                ## StartLimitInterval is used for systemd versions < 230
                # StartLimitInterval = 10s

                TasksMax=infinity
                OOMScoreAdjust=-1000

                [Install]
                WantedBy=multi-user.target
          commands:
            00_fill_nomad_config_nodename:
              command: echo "name=\"$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\"" >> /opt/nomad/config/nodename.hcl
            01_change_ownership:
              command: chown -R nomad:nomad /opt/nomad
            02_reload_systemd:
              command: systemctl daemon-reload
            03_start_nomad:
              command: systemctl enable nomad
            04_start_nomad:
              command: systemctl start nomad
        setup_dnsmasq:
          files:
            /etc/dnsmasq.d/nomad:
              content: |
                server=/consul/127.0.0.1#8600
                listen-address=127.0.0.1
                bind-interfaces
          packages:
            apt:
              dnsmasq-base: []
              dnsmasq: []
              jq: []
          commands:
            01_start_dnsmasq:
              command: service dnsmasq restart
    Properties:
      InstanceType: !Ref NomadServerInstanceType
      AssociatePublicIpAddress: false
      SecurityGroups:
        - !Ref NomadSecGroup
      KeyName: !Ref KeyPair
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref "AWS::Region"
        - US1604HVM
      IamInstanceProfile: !Ref NomadServerProfile
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -x
            #CFN Functions
            function cfn_fail
            {
              cfn-signal -e 1 --stack ${AWS::StackName} --region ${AWS::Region} --resource NomadServerASG
              exit 1
            }
            function cfn_success
            {
              cfn-signal -e 0 --stack ${AWS::StackName} --region ${AWS::Region} --resource NomadServerASG
              exit 0
            }
            S3URI=https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}
            apt-get -y update
            # Install git
            apt-get install -y git jq
            #Load Linux utils
            until git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git ; do echo "Retrying"; done
            cd /quickstart-linux-utilities && source quickstart-cfn-tools.source
            # Prep operating systems
            qs_update-os || qs_err
            qs_bootstrap_pip || qs_err
            qs_aws-cfn-bootstrap || qs_err
            #cfn-init
            echo "Executing config-sets"
            cfn-init -v --stack ${AWS::StackName} --resource NomadServerLC --configsets cs_install --region ${AWS::Region} || (cfn_fail || (journalctl -b --no-pager -u nomad && cat /opt/nomad/config/server.json))
            # Signal cfn-init (final check)
            [ $(qs_status) == 0 ] && cfn_success || cfn_fail
          - S3Region: !If [GovCloudCondition, s3-us-gov-west-1, s3]
  NomadClientLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          cs_install:
            - install_and_enable_cfn_hup
            - create_nomad_group_user_dir
            - install_nomad
            - install_consul
            - install_vault
            - install_consul_template
            - nomad_bootstrap
            - setup_dnsmasq
        install_and_enable_cfn_hup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub
                "[cfn-auto-reloader-hook]

                triggers=post.update

                path=Resources.NomadClientLC.Metadata.AWS::CloudFormation::Init

                action=/usr/local/bin/cfn-init -v
                          --stack ${AWS::StackName}
                          --resource NomadClientLC
                          --configsets cs_install
                          --region ${AWS::Region}

                runas=root"
            /lib/systemd/system/cfn-hup.service:
              content: |
                [Unit]
                Description=cfn-hup daemon
 
                [Service]
                Type=simple
                ExecStart=/usr/local/bin/cfn-hup
                Restart=always

                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service
        create_nomad_group_user_dir:
          users:
            nomad:
              homeDir: /srv/nomad
          commands:
            01_create_data_dir:
              command: mkdir -p /opt/nomad/data
        install_nomad:
          sources:
            /usr/bin/: https://releases.hashicorp.com/nomad/1.1.2/nomad_1.1.2_linux_amd64.zip
        install_consul:
          sources:
            /usr/bin/: https://releases.hashicorp.com/consul/1.10.1/consul_1.10.1_linux_amd64.zip
        install_vault:
          sources:
            /usr/bin/: https://releases.hashicorp.com/vault/1.7.3/vault_1.7.3_linux_amd64.zip
        install_consul_template:
          sources:
            /usr/bin/: https://releases.hashicorp.com/consul-template/0.26.0/consul-template_0.26.0_linux_amd64.zip

        nomad_bootstrap:
          files:
            /opt/nomad/config/nomad.hcl:
              content: |
                bind_addr  = "0.0.0.0"
                datacenter = "{{Region}}"
                log_level  = "WARN"

                advertise {
                  http = "{{{InterfaceTemplate}}}"
                  rpc  = "{{{InterfaceTemplate}}}"
                  serf = "{{{InterfaceTemplate}}}"
                }
              context:
                Region: !Ref "AWS::Region"
                InterfaceTemplate: '{{ GetDefaultInterfaces | include \"type\" \"ipv4\" | attr \"address\" }}'
              mode: 000644
            /opt/nomad/config/client.hcl:
              content: !Sub |
                client {
                  enabled = true

                  server_join {
                    retry_join = ["provider=aws region=${AWS::Region} tag_key=${NomadEc2RetryTagKey} tag_value=${NomadEc2RetryTagValue}"]
                  }
                }
              mode: 000644
            /etc/systemd/system/nomad.service:
             content: |
                [Unit]
                Description=HashiCorp Nomad
                Documentation=https://nomadproject.io/docs/
                Wants=network-online.target
                After=network-online.target
                ConditionFileNotEmpty=/opt/nomad/config/nomad.hcl
                ConditionFileNotEmpty=/opt/nomad/config/client.hcl

                # When using Nomad with Consul it is not necessary to start Consul first. These
                # lines start Consul before Nomad as an optimization to avoid Nomad logging
                # that Consul is unavailable at startup.
                #Wants=consul.service
                #After=consul.service

                [Service]
                Type=simple
                User=root
                Group=root
                EnvironmentFile=-/opt/nomad/config/nomad.env
                ExecReload=/bin/kill -HUP $MAINPID
                ExecStart=/usr/bin/nomad agent -config /opt/nomad/config -data-dir /opt/nomad/data

                KillMode=process
                KillSignal=SIGINT
                LimitNOFILE=65536
                LimitNPROC=infinity
                Restart=on-failure
                TimeoutSec=300s
                RestartSec=2

                ## Configure unit start rate limiting. Units which are started more than
                ## *burst* times within an *interval* time span are not permitted to start any
                ## more. Use `StartLimitIntervalSec` or `StartLimitInterval` (depending on
                ## systemd version) to configure the checking interval and `StartLimitBurst`
                ## to configure how many starts per interval are allowed. The values in the
                ## commented lines are defaults.
                # StartLimitBurst = 5

                ## StartLimitIntervalSec is used for systemd versions >= 230
                # StartLimitIntervalSec = 10s

                ## StartLimitInterval is used for systemd versions < 230
                # StartLimitInterval = 10s

                TasksMax=infinity
                OOMScoreAdjust=-1000

                [Install]
                WantedBy=multi-user.target
          commands:
            00_fill_nomad_config_nodename:
              command: echo "name=\"$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\"" >> /opt/nomad/config/nodename.hcl
            01_change_ownership:
              command: chown -R nomad:nomad /opt/nomad
            02_reload_systemd:
              command: systemctl daemon-reload
            03_start_nomad:
              command: systemctl enable nomad
            04_start_nomad:
              command: systemctl start nomad

        setup_dnsmasq:
          files:
            /etc/dnsmasq.d/nomad:
              content: |
                server=/consul/127.0.0.1#8600
                listen-address=127.0.0.1
                bind-interfaces
          packages:
            apt:
              dnsmasq-base: []
              dnsmasq: []
          commands:
            01_start_dnsmasq:
              command: service dnsmasq restart
    Properties:
      InstanceType: !Ref NomadClientInstanceType
      AssociatePublicIpAddress: false
      SecurityGroups:
        - !Ref NomadSecGroup
      KeyName: !Ref KeyPair
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref "AWS::Region"
        - US1604HVM
      IamInstanceProfile: !Ref NomadClientProfile
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -x
            #CFN Functions
            function cfn_fail
            {
              cfn-signal -e 1 --stack ${AWS::StackName} --region ${AWS::Region} --resource NomadClientASG
            }
            function cfn_success
            {
              cfn-signal -e 0 --stack ${AWS::StackName} --region ${AWS::Region} --resource NomadClientASG
              exit 0
            }
            S3URI=https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}
            apt-get -y update
            # Install git
            apt-get install -y git jq
            #Load Linux utils
            until git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git ; do echo "Retrying"; done
            cd /quickstart-linux-utilities && source quickstart-cfn-tools.source
            # Prep operating systems
            qs_update-os || qs_err
            qs_bootstrap_pip || qs_err
            qs_aws-cfn-bootstrap || qs_err
            #cfn-init
            echo "Executing config-sets"
            cfn-init -v --stack ${AWS::StackName} --resource NomadClientLC --configsets cs_install --region ${AWS::Region}
            STATUS=$?
            echo signal cfn success/failure
            [ $STATUS == 0 ] || cfn_fail
            echo log info on failure
            [ $STATUS == 0 ] || (journalctl -b --no-pager -u nomad && cat /opt/nomad/config/client.json && systemctl status nomad.service)
            
            # Signal cfn-init (final check)
            [ $(qs_status) == 0 ] && cfn_success || cfn_fail
          - S3Region: !If [GovCloudCondition, s3-us-gov-west-1, s3]
  NomadClientRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
            Sid: ""
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - "s3:GetObject"
                Resource: !Sub "arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*"
                Effect: Allow
          PolicyName: AuthenticatedS3GetObjects
  NomadClientPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: nomad-client
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: "ec2:DescribeInstances"
            Resource: "*"
      Roles:
        - !Ref NomadClientRole
  NomadClientProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref NomadClientRole
  NomadServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
            Sid: ""
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - "s3:GetObject"
                Resource: !Sub "arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*"
                Effect: Allow
          PolicyName: AuthenticatedS3GetObjects
  NomadServerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: nomad-server
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "ec2:DescribeInstances"
            Resource: "*"
      Roles:
        - !Ref NomadServerRole
  NomadServerProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref NomadServerRole
  LoadBalancerFQDNRecord:
    Condition: SetupRoute53
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      Name: !Ref 'LoadBalancerFQDN'
      AliasTarget:
        HostedZoneId: !GetAtt 'NomadServerELB.CanonicalHostedZoneNameID'
        DNSName: !GetAtt 'NomadServerELB.DNSName'
      HostedZoneId: !Ref 'HostedZoneID'
  CopyLambdaStack:
    Condition: GenerateSSL
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/copy-lambdas.template.yaml"
      Parameters:
        QSS3BucketName: !Ref QSS3BucketName
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
  ConfigureSSLStack:
    Condition: GenerateSSL
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/acm-cert-r53-record.template.yaml"
      Parameters:
        LambdaZipsBucketName: !GetAtt 'CopyLambdaStack.Outputs.LambdaZipsBucket'
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        DomainName: !Ref LoadBalancerFQDN
        HostedZoneID: !Ref HostedZoneID

Outputs:
  NomadEc2RetryTagKey:
    Value: !Ref NomadEc2RetryTagKey
    Description:
      The EC2 instance tag key to filter on when joining to other Nomad nodes.

  NomadEc2RetryTagValue:
    Value: !Ref NomadEc2RetryTagValue
    Description:
      The EC2 instance tag value to filter on when joining to other Nomad nodes.

  NomadServerELB:
    Description:
      The public URL of your Nomad Load Balancer. Create a CNAME record pointing
      at this Load Balancer.
    Value: !Sub "https://${NomadServerELB.DNSName}"

  NomadServerFQDN:
    Condition: SetupRoute53
    Description: The public CNAME pointing to your Nomad Load Balancer.
    Value: !Sub "https://${LoadBalancerFQDN}"
